{"version":3,"sources":["logo.svg","NumberHolder.js","RouletteInput.js","RouletteButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NumberHolder","props","className","value","RouletteInput","render","onChange","e","state","currentTarget","Component","RouletteButton","onClick","randomizer","money","Math","trunc","random","App","console","log","src","logo","alt","number","isNaN","Number","setState","Array","apply","map","x","forEach","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,qMCE9BC,G,MAAe,SAACC,GAC5B,OACC,uBAAKC,UAAU,iBACd,qBAAGA,UAAU,qBAAqBD,EAAME,UCF9BC,EAAb,YACC,WAAYH,GAAQ,IAAD,8BAClB,4CAAMA,KAMPI,OAAS,WACR,OACC,yBAAKH,UAAU,gBACd,2BAAOC,MAAO,EAAKF,MAAME,MAAOG,SAAU,SAACC,GAAD,OAAK,EAAKC,MAAMF,SAASC,EAAEE,cAAcN,QAAQD,UAAU,YARvG,EAAKM,MAAQ,CACZF,SAAWL,EAAMK,UAHA,EADpB,2BAAmCI,aCAtBC,EAAb,YACC,WAAYV,GAAQ,IAAD,8BAClB,4CAAMA,KAKPI,OAAS,WACR,OACC,yBAAKH,UAAU,mBACd,4BAAQU,QAAS,EAAKJ,MAAMI,QAASV,UAAU,UAA/C,cAPF,EAAKM,MAAQ,CACZI,QAAUX,EAAMW,SAHC,EADpB,2BAAoCF,aCI9BG,EAAa,SAACC,GACnB,IAAIX,EACG,OAAQY,KAAKC,MAAoB,EAAdD,KAAKE,WACtB,KAAK,EACHd,EAAQ,EACR,MACF,KAAK,EACHA,EAAQ,GACR,MACF,KAAK,EACHA,EAAQ,GACR,MACF,KAAK,EACHA,EAAQ,GACR,MACF,KAAK,EACHA,EAAQ,IACR,MACF,KAAK,EACHA,EAAQ,IACR,MACF,KAAK,EACHA,EAAQ,IACR,MACF,KAAK,EACHA,EAAQ,EAGjB,OADAA,EAAQY,KAAKC,MAAMb,EAAQW,IA6CfI,E,YAxCf,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRI,OAAS,WAEP,OADAc,QAAQC,IAAI,EAAKZ,MAAML,MAAO,EAAKK,MAAMM,OAEvC,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKmB,IAAKC,IAAMpB,UAAU,WAAWqB,IAAI,SACzC,kDAIF,yBAAKrB,UAAU,aACb,kBAAC,EAAD,CAAcC,MAAO,EAAKK,MAAML,QAChC,2BAAOD,UAAU,kBAAjB,WACA,kBAAC,EAAD,CAAeC,MAAO,EAAKK,MAAMM,MAAOR,SAAU,EAAKE,MAAMF,WAC7D,kBAAC,EAAD,CAAgBM,QAAS,EAAKJ,MAAMI,aA9B1C,EAAKJ,MAAQ,CACXL,MAAO,EACPW,MAAO,EACPR,SAAW,SAACkB,GACV,IAAIC,MAAMC,OAAOF,IAAS,CACxB,IAAIV,EAAQU,EACZ,EAAKG,SAAS,CAACb,MAAOY,OAAOZ,OAGjCF,QAAU,WACbgB,MAAMC,MAAM,KAAKD,MAAM,IAAIE,KAAI,SAACC,GAAD,OAAKlB,EAAW,EAAKL,MAAMM,UAAQkB,SAAQ,SAAAzB,GAAC,OAAE,EAAKoB,SAAS,CAACxB,MAAOI,SAZjF,E,2BADD0B,IAAMvB,WC1BJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlC,OAAO,kBAAC,EAAD,MAASmC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5318a3d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c2a32ef2.svg\";","import * as React from 'react';\r\n\r\nexport const NumberHolder = (props) => {\r\n\treturn (\r\n\t\t<div className=\"number-holder\">\r\n\t\t\t<p className=\"focus-in-contract\">{props.value}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nexport class RouletteInput extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tonChange : props.onChange,\r\n\t\t}\r\n\t}\r\n\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<div className=\"roulette-inp\" >\r\n\t\t\t\t<input value={this.props.value} onChange={(e)=>this.state.onChange(e.currentTarget.value)} className=\"input\"/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nexport class RouletteButton extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tonClick : props.onClick\r\n\t\t}\r\n\t}\r\n\trender = () => { \r\n\t\treturn (\r\n\t\t\t<div className=\"roulette-button\">\r\n\t\t\t\t<button onClick={this.state.onClick} className=\"button\" > Tirar! </button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { NumberHolder } from './NumberHolder';\nimport { RouletteInput } from './RouletteInput';\nimport { RouletteButton } from './RouletteButton';\n\nconst randomizer = (money)=>{\n\tlet value;\n        switch (Math.trunc(Math.random()*8)) {\n          case 0 : \n            value = 0;\n            break;\n          case 1 : \n            value = 0.3;\n            break;\n          case 2 : \n            value = 0.5;\n            break;\n          case 3 : \n            value = 0.8;\n            break;\n          case 4 :\n            value = 1.3;\n            break;\n          case 5 :\n            value = 1.5;\n            break;\n          case 6 :\n            value = 1.8;\n            break;\n          case 7 :\n            value = 2;\n        }\n\t  value = Math.trunc(value * money);\n\t  return value;\n}\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props)\n  this.state = {\n    value: 0,\n    money: 0,\n    onChange : (number) => {\n      if(!isNaN(Number(number))){\n        let money = number\n        this.setState({money: Number(money)})\n      }\n    },\n    onClick : ()=>{\n\tArray.apply(null,Array(5)).map((x)=>randomizer(this.state.money)).forEach(e=>this.setState({value: e}));\n    }\n  } \n}\n\n\nrender = () => {\n  console.log(this.state.value, this.state.money)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>\n          Despair Roulette!\n        </h1>\n      </header>\n      <div className=\"game-area\">\n        <NumberHolder value={this.state.value}/>\n        <label className=\"roulette-label\">Apuesta</label>\n        <RouletteInput value={this.state.money} onChange={this.state.onChange} />\n        <RouletteButton onClick={this.state.onClick} />\n      </div>\n    </div>\n  );\n}\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}